// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oapi

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Geofence defines model for Geofence.
type Geofence struct {
	DeviceToken string        `json:"deviceToken"`
	Polygon     [][][]float64 `json:"polygon"`
	Title       string        `json:"title"`
	UserID      uint64        `json:"userID"`
}

// Task defines model for Task.
type Task struct {
	Completed   bool    `json:"completed"`
	Description *string `json:"description,omitempty"`
	Id          uint64  `json:"id"`
	Title       string  `json:"title"`
}

// Tracker defines model for Tracker.
type Tracker struct {
	DeviceToken string    `json:"deviceToken"`
	Position    []float64 `json:"position"`
}

// PostGeofenceJSONRequestBody defines body for PostGeofence for application/json ContentType.
type PostGeofenceJSONRequestBody = Geofence

// PostTrackerJSONRequestBody defines body for PostTracker for application/json ContentType.
type PostTrackerJSONRequestBody = Tracker

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ジオフェンス登録
	// (POST /geofence)
	PostGeofence(c *gin.Context)
	// ヘルスチェック
	// (GET /healthcheck)
	GetHealthcheck(c *gin.Context)
	// タスク詳細取得
	// (GET /task/{id})
	GetTask(c *gin.Context, id string)
	// タスク一覧取得
	// (GET /tasks)
	GetTasks(c *gin.Context)
	// トラッカー送信
	// (POST /tracker)
	PostTracker(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostGeofence operation middleware
func (siw *ServerInterfaceWrapper) PostGeofence(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostGeofence(c)
}

// GetHealthcheck operation middleware
func (siw *ServerInterfaceWrapper) GetHealthcheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetHealthcheck(c)
}

// GetTask operation middleware
func (siw *ServerInterfaceWrapper) GetTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTask(c, id)
}

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTasks(c)
}

// PostTracker operation middleware
func (siw *ServerInterfaceWrapper) PostTracker(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostTracker(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/geofence", wrapper.PostGeofence)
	router.GET(options.BaseURL+"/healthcheck", wrapper.GetHealthcheck)
	router.GET(options.BaseURL+"/task/:id", wrapper.GetTask)
	router.GET(options.BaseURL+"/tasks", wrapper.GetTasks)
	router.POST(options.BaseURL+"/tracker", wrapper.PostTracker)
}
