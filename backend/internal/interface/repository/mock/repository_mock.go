// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interface/repository/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "forgetful-guard/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGeofenceRepository is a mock of GeofenceRepository interface.
type MockGeofenceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGeofenceRepositoryMockRecorder
}

// MockGeofenceRepositoryMockRecorder is the mock recorder for MockGeofenceRepository.
type MockGeofenceRepositoryMockRecorder struct {
	mock *MockGeofenceRepository
}

// NewMockGeofenceRepository creates a new mock instance.
func NewMockGeofenceRepository(ctrl *gomock.Controller) *MockGeofenceRepository {
	mock := &MockGeofenceRepository{ctrl: ctrl}
	mock.recorder = &MockGeofenceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeofenceRepository) EXPECT() *MockGeofenceRepositoryMockRecorder {
	return m.recorder
}

// PutDeviceToken mocks base method.
func (m *MockGeofenceRepository) PutDeviceToken(userID uint64, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutDeviceToken", userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutDeviceToken indicates an expected call of PutDeviceToken.
func (mr *MockGeofenceRepositoryMockRecorder) PutDeviceToken(userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutDeviceToken", reflect.TypeOf((*MockGeofenceRepository)(nil).PutDeviceToken), userID, token)
}

// PutGeofence mocks base method.
func (m *MockGeofenceRepository) PutGeofence(ctx context.Context, geofence *domain.Geofence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutGeofence", ctx, geofence)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutGeofence indicates an expected call of PutGeofence.
func (mr *MockGeofenceRepositoryMockRecorder) PutGeofence(ctx, geofence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutGeofence", reflect.TypeOf((*MockGeofenceRepository)(nil).PutGeofence), ctx, geofence)
}
