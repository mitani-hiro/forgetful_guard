// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	models "forgetful-guard/internal/domain/models"
	oapi "forgetful-guard/internal/interface/oapi"
	reflect "reflect"

	location "github.com/aws/aws-sdk-go-v2/service/location"
	gomock "github.com/golang/mock/gomock"
)

// MockLocationClient is a mock of LocationClient interface.
type MockLocationClient struct {
	ctrl     *gomock.Controller
	recorder *MockLocationClientMockRecorder
}

// MockLocationClientMockRecorder is the mock recorder for MockLocationClient.
type MockLocationClientMockRecorder struct {
	mock *MockLocationClient
}

// NewMockLocationClient creates a new mock instance.
func NewMockLocationClient(ctrl *gomock.Controller) *MockLocationClient {
	mock := &MockLocationClient{ctrl: ctrl}
	mock.recorder = &MockLocationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocationClient) EXPECT() *MockLocationClientMockRecorder {
	return m.recorder
}

// BatchPutGeofence mocks base method.
func (m *MockLocationClient) BatchPutGeofence(ctx context.Context, input *location.BatchPutGeofenceInput) (*location.BatchPutGeofenceOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchPutGeofence", ctx, input)
	ret0, _ := ret[0].(*location.BatchPutGeofenceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchPutGeofence indicates an expected call of BatchPutGeofence.
func (mr *MockLocationClientMockRecorder) BatchPutGeofence(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchPutGeofence", reflect.TypeOf((*MockLocationClient)(nil).BatchPutGeofence), ctx, input)
}

// MockUsecaseService is a mock of UsecaseService interface.
type MockUsecaseService struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseServiceMockRecorder
}

// MockUsecaseServiceMockRecorder is the mock recorder for MockUsecaseService.
type MockUsecaseServiceMockRecorder struct {
	mock *MockUsecaseService
}

// NewMockUsecaseService creates a new mock instance.
func NewMockUsecaseService(ctrl *gomock.Controller) *MockUsecaseService {
	mock := &MockUsecaseService{ctrl: ctrl}
	mock.recorder = &MockUsecaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecaseService) EXPECT() *MockUsecaseServiceMockRecorder {
	return m.recorder
}

// CreateGeofence mocks base method.
func (m *MockUsecaseService) CreateGeofence(ctx context.Context, req *oapi.Geofence) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGeofence", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGeofence indicates an expected call of CreateGeofence.
func (mr *MockUsecaseServiceMockRecorder) CreateGeofence(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGeofence", reflect.TypeOf((*MockUsecaseService)(nil).CreateGeofence), ctx, req)
}

// CreateTask mocks base method.
func (m *MockUsecaseService) CreateTask(ctx context.Context, tx *sql.Tx, task *models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", ctx, tx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockUsecaseServiceMockRecorder) CreateTask(ctx, tx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockUsecaseService)(nil).CreateTask), ctx, tx, task)
}
