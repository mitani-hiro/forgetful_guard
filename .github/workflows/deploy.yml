name: Deploy to Amazon ECS

on:
  push:
    branches: ["develop"]

env:
  AWS_REGION: ap-northeast-1
  ECR_PUBLIC_REGION: us-east-1 # ECRパブリック用
  ECR_REPOSITORY: h7f0r1p2/forgetful-guard
  ECS_SERVICE: forgetful-guard-service
  ECS_CLUSTER: ForgetfulGuardECSCluster
  ECS_TASK_DEFINITION: backend/ecs-task-definition.json
  CONTAINER_NAME: forgetful-guard-container

permissions:
  id-token: write # OIDC で AWS へ認証するために必要
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::421156463971:role/forgetful-guard-oidc-deloy-role # OIDC 用 IAM ロール
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region $ECR_PUBLIC_REGION | docker login --username AWS --password-stdin public.ecr.aws
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: public.ecr.aws # ECRパブリック用
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f backend/deployment/Dockerfile.ecs backend/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
